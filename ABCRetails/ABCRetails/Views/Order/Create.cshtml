@model ABCRetails.Models.ViewModels.OrderCreateViewModel
@{
    ViewData["Title"] = "Create Order";
}

<h2><i class="fas fa-plus-circle"></i> Create Order</h2>
<hr />

<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" method="post" id="orderForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-3">
                <label asp-for="CustomerId" class="control-label"></label>
                <select asp-for="CustomerId" class="form-control" id="customerSelect">
                    <option value="">-- Select Customer --</option>
                    @foreach (var customer in Model.Customers)
                    {
                        <!-- FIX: Use RowKey as the value -->
                        <option value="@customer.RowKey">@customer.Name @customer.Surname (@customer.Username)</option>
                    }
                </select>
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="ProductId" class="control-label"></label>
                <select asp-for="ProductId" class="form-control" id="productSelect">
                    <option value="">-- Select Product --</option>
                    @foreach (var product in Model.Products)
                    {
                        <!-- FIX: Use RowKey as the value -->
                        <option value="@product.RowKey" data-price="@product.Price" data-stock="@product.StockAvailable">
                            @product.ProductName - R@(product.Price.ToString("F2")) (Stock: @product.StockAvailable)
                        </option>
                    }
                </select>
                <span asp-validation-for="ProductId" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" type="number" class="form-control" id="quantityInput" min="1" value="1" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
                <small id="stockInfo" class="form-text text-muted"></small>
            </div>

            <div class="form-group mb-3">
                <label asp-for="OrderDate" class="control-label">
                    <i class="fas fa-calendar me-1"></i>Order Date
                </label>
                <input asp-for="OrderDate" type="date" class="form-control" />
                <span asp-validation-for="OrderDate" class="text-danger"></span>
            </div>

            <input type="hidden" asp-for="Status" />

            <div class="form-group mb-3">
                <label class="control-label">Total Price</label>
                <div class="form-control-plaintext">
                    <strong id="totalPrice">R0.00</strong>
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Create Order
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productSelect = document.getElementById('productSelect');
            const quantityInput = document.getElementById('quantityInput');
            const totalPriceElement = document.getElementById('totalPrice');
            const stockInfoElement = document.getElementById('stockInfo');

            /** Calculates and updates the total price display. */
            function calculateTotal() {
                const selectedOption = productSelect.options[productSelect.selectedIndex];
                // Use optional chaining for safer access
                const price = selectedOption ? parseFloat(selectedOption.getAttribute('data-price')) : 0;
                const quantity = parseInt(quantityInput.value) || 0;
                const total = price * quantity;
                totalPriceElement.textContent = 'R' + total.toFixed(2);
            }

            /** Updates the available stock information and applies client-side stock validation. */
            function updateStockInfo() {
                const selectedOption = productSelect.options[productSelect.selectedIndex];
                if (selectedOption && selectedOption.value) {
                    const stock = parseInt(selectedOption.getAttribute('data-stock'));
                    stockInfoElement.textContent = `Available stock: ${stock}`;

                    // Set max attribute to visually limit input
                    quantityInput.max = stock;

                    // Custom validation: check if current quantity exceeds stock
                    const currentQuantity = parseInt(quantityInput.value) || 0;
                    if (currentQuantity > stock) {
                        // Display a custom error message on the quantity input
                        quantityInput.setCustomValidity(`Quantity cannot exceed available stock (${stock})`);
                    } else {
                        // Clear custom validity if everything is okay
                        quantityInput.setCustomValidity('');
                    }
                    // Trigger validation check to update UI (important for the custom validity message)
                    quantityInput.reportValidity();

                } else {
                    stockInfoElement.textContent = '';
                    quantityInput.removeAttribute('max');
                    quantityInput.setCustomValidity('');
                    quantityInput.reportValidity();
                }
            }

            // Event Listeners
            productSelect.addEventListener('change', function() {
                calculateTotal();
                updateStockInfo();
            });

            quantityInput.addEventListener('input', function() {
                calculateTotal();
                updateStockInfo();
            });

            // Initialize on page load
            calculateTotal();
            updateStockInfo();

            // Form submission client-side check for dropdowns (in addition to model validation)
            document.getElementById('orderForm').addEventListener('submit', function(e) {
                const customerId = document.getElementById('customerSelect').value;
                const productId = document.getElementById('productSelect').value;

                if (!customerId || !productId) {
                    e.preventDefault();
                    // Fallback alert for browsers without robust HTML5 form validation on dropdowns
                    alert('Please select both a Customer and a Product.');
                    return false;
                }
            });
        });
    </script>
}